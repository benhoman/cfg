# # Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.config/zsh/.zshrc.
# # Initialization code that may require console input (password prompts, [y/n]
# # confirmations, etc.) must go above this block; everything else may go below.
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi

# Set folders/files
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
ZSH_CONFIG_DIR="${XDG_CONFIG_HOME:-${HOME}/.config/zsh}"
ZSH_ALIASES="${ZSH_CONFIG_DIR}/aliases.zsh"
ZSH_FUNCTIONS="${ZSH_CONFIG_DIR}/functions.zsh"
P10K_CONFIG="${ZSH_CONFIG_DIR}/p10k.zsh"
CA_CONFIG="${ZSH_CONFIG_DIR}/ca_config.zsh"
PYENV_CONFIG="${ZSH_CONFIG_DIR}/pyenv.zsh"

# Path
path=("$HOME/.local/bin" $path)
export PATH

# Bootstrap Zinit
if [ ! -d "$ZINIT_HOME" ]; then
    mkdir -p "$(dirname $ZINIT_HOME)"
    git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Load Zinit
source "${ZINIT_HOME}/zinit.zsh"

# Powerlevel10k
# zinit ice depth=1; zinit light romkatv/powerlevel10k

# Add zsh plugins
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light Aloxaf/fzf-tab

# Snippets
zinit snippet OMZP::git
zinit snippet OMZP::sudo
zinit snippet OMZP::archlinux
zinit snippet OMZP::command-not-found
zinit snippet OMZP::docker-compose

# Load completions
autoload -Uz compinit && compinit

zinit cdreplay -q

# # To customize prompt, run `p10k configure` or edit ~/.config/zsh/p10k.zsh.
# [[ ! -f $P10K_CONFIG ]] || source $P10K_CONFIG

# Keybindings
bindkey '^y' autosuggest-accept
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward

# History
HISTSIZE=10000
HISTFILE=~/.cache/zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

# Completion styling
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
# zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza --color=auto --icons $realpath'
# zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'eza --color=auto --icons $realpath'

# Starship
if type starship > /dev/null; then
  export STARSHIP_CONFIG=~/.config/starship/starship.toml
  eval "$(starship init zsh)"
fi

# Load Aliases/Functions
[[ ! -f $ZSH_ALIASES ]] || source $ZSH_ALIASES
[[ ! -f $ZSH_FUNCTIONS ]] || source $ZSH_FUNCTIONS

# Load CA Config on thanos
if [[ $(hostnamectl hostname) == "thanos" ]] then;
  [[ ! -f $CA_CONFIG ]] || source $CA_CONFIG
fi

# Shell integrations
# eval "$(fzf --zsh)"
# eval "$(zoxide init --cmd cd zsh)" # overrides cd...
if type zoxide > /dev/null; then
  eval "$(zoxide init zsh)"
fi

# SSH-Agent
eval $(ssh-agent) > /dev/null
find ~/.ssh -name 'id_*' ! -name '*.pub' -exec ssh-add -q {} \;

# Pyenv
# [[ ! -f $PYENV_CONFIG ]] || source $PYENV_CONFIG

_fzf_compgen_path() {
    rg --files --glob "!.git" . "$1"
}

_fzf_compgen_dir() {
   fd --type d --hidden --follow --exclude ".git" . "$1"
}

